<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.bit.kit.mapper.ProductMapper">

<!-- 메뉴 상품 불러오기 -->
	<select id="getList" resultType="edu.bit.kit.vo.ProductVO">
<![CDATA[
select PRODUCT_NUMBER, CO_NAME, CO_RECIEVINGDATE, CO_STOCK, CO_CATEGORY, CO_PRICE, CO_SERVINGS,CO_COOKINGTIME, CO_PREPARE_TIME, CO_COMMENT from HK_PROD order by PRODUCT_NUMBER desc
]]>
	</select>

	<select id="getTotalCount" resultType="int">
   <![CDATA[
   		select count(*) from HK_PROD  		
   ]]>
	</select>

	<select id="getListWithPaging"
		resultType="edu.bit.kit.vo.ProductVO">
   <![CDATA[
   		  SELECT * FROM (
              SELECT ROWNUM AS RNUM, A.* FROM (
                       SELECT
                             *
                         FROM
                             HK_PROD 
                         order by PRODUCT_NUMBER desc   
             ) A WHERE ROWNUM <= #{pageNum} * #{amount}
         ) WHERE RNUM > (#{pageNum}-1) * #{amount}		
   ]]>
	</select>

<!-- 상품 디테일 불러오기 -->
<select id="getMenu" resultType="edu.bit.kit.vo.ProductVO">
<![CDATA[
		select * from HK_PROD where PRODUCT_NUMBER = #{PRODUCT_NUMBER}
	]]>
</select>



	<!-- 장바구니 -->
	<!-- <resultMap type="edu.bit.kit.vo.CartVO" id="addCart"> -->
<resultMap type="edu.bit.kit.vo.CartVO" id="addCart">
		<result column="CART_ID" property="cartId" />
		<result column="USER_ID" property="cartUserid" />
		<result column="PRODUCT_NUMBER" property="cartProductNumber" />
		<result column="CART_NUMBER" property="cartNumber" />
		<result column="CO_AMOUNT" property="cartAmount" />
	
	<collection resultMap="productList" property="productList">
		</collection> 
	
	</resultMap>

	<resultMap type="edu.bit.kit.vo.CartCateVO" id="cartCategory">
		<result column="CART_NUMBER" property="cartCateNumber" />
		<result column="CO_NAME" property="cartCateName" />
	</resultMap>

	<resultMap type="edu.bit.kit.vo.ProductVO" id="productList">
		<result column="CO_NAME" property="CO_NAME" />
		<result column="CO_PRICE" property="CO_PRICE" />
		<result column="PRODUCT_NUMBER" property="PRODUCT_NUMBER" />	
	</resultMap>


	<!-- 장바구니 담기 -->
	<insert id="addCart">
		Insert into HK_CART
		(CART_ID,USER_ID,PRODUCT_NUMBER,CART_NUMBER,CO_AMOUNT)
		values
		(CART_ID_seq.nextval, #{cartUserid}, #{cartProductNumber},
		1, 1)		
		<!-- Insert into HK_CART
		(CART_ID,USER_ID,PRODUCT_NUMBER,CART_NUMBER,CO_AMOUNT)
		values
		(CART_ID_seq.nextval, 'SUN', 5,
		2, 3) -->
	</insert>

	<!-- 장바구니 리스트 -->
		<select id="getListCart" resultMap="addCart">
	<![CDATA[
select c.CART_ID, c.USER_ID, c.PRODUCT_NUMBER, c.CART_NUMBER, c.CO_AMOUNT, 
p.CO_NAME AS CO_NAME, p.CO_PRICE AS CO_PRICE, u.CO_NAME AS userName  
from HK_CART c, HK_PROD p, HK_USER u where c.USER_ID = #{userId} AND c.USER_ID = u.USER_ID AND c.PRODUCT_NUMBER = p.PRODUCT_NUMBER
]]>
	</select>
<!-- 	<select id="getListCart" resultMap="addCart">
	<![CDATA[
select CART_ID, USER_ID, PRODUCT_ NUMBER, CART_NUMBER, CO_AMOUNT  from HK_CART where HK_CART.USER_ID = #{userId}
]]>
	</select> -->
	
	<!-- 장바구니 총금액 --> <!-- sql 작성새롭게 해야함 -->
	<select id="sumCartMoney" resultType="int">
select NVL(SUM(CO_PRICE*CO_AMOUNT), 0) MONEY from HK_CART c, HK_PROD p where c.PRODUCT_NUMBER = p.PRODUCT_NUMBER AND c.USER_ID = #{userId}
	</select>
	<!-- 장바구니 삭제 -->
	<delete id="deleteCart">
	<![CDATA[
	delete from HK_CART where HK_CART.CART_ID = #{cartId}
	]]>
	</delete>
	<!-- 장바구니 기존 상품 조회 -->
	<select id="countCart" resultType="int">
	select count(*) from HK_CART where HK_CART.USER_ID = #{userId} and HK_CART.PRODUCT_NUMBER = #{cartProductNumber}
	</select>
	<!-- 장바구니 기존 상품 존재할 시 수량으로 추가 -->
	<update id="updateCart">
	update HK_CART set CO_AMOUNT = CO_AMOUNT + 1 where HK_CART.USER_ID = #{cartUserid} and HK_CART.PRODUCT_NUMBER = #{cartProductNumber}
	</update>
	

	
	
	<!-- 시큐리티 -->
	<resultMap type="edu.bit.kit.vo.UserVO" id="userMap">		
		<result column="USER_ID" property="userId" />
		<result column="CO_NUMBER" property="userNumber" />
		<result column="CO_PASSWORD" property="userPassword" />
		<result column="CO_NAME" property="userName" />
		<result column="CO_PHONE" property="userPhone" />
		<result column="CO_EMAIL" property="userEmail" />
		<result column="CO_BIRTH" property="userBirth" />
		<result column="CO_GENDER" property="userGender" />
		<result column="CO_ENABLED" property="userEnabled" />
		<result column="CO_JOINDATE" property="userJoinDate" />
		<result column="CO_LOGINTIME" property="userLoginTime" />
		<result column="ADDRESS_1" property="userAddress1" />
		<result column="ADDRESS_2" property="userAddress2" />
		<result column="ADDRESS_3" property="userAddress3" />
		<result column="CO_ACCOUNT" property="userAccount" />
		
 		<collection resultMap="authMap" property="authList">
		</collection> 
	</resultMap>

	<resultMap type="edu.bit.kit.vo.AuthVO" id="authMap">
	
		<result column="AUTHORITIES_ID" property="authId" />
		<result column="CO_AUTHORITY" property="authAuthority" />
		<result column="CO_ENABLED" property="authEabled" />
		<result column="USER_ID" property="userId" />
	</resultMap>
	
	<select id="getUser" resultMap="userMap">
		select * from HK_USER , HK_AUTH 
		where HK_USER.USER_ID = HK_AUTH.USER_ID and HK_USER.USER_ID = #{userId}
	</select>
	
	<select id="findByUserId" resultMap="userMap">	
	
	<![CDATA[
SELECT mem.USER_ID, CO_NUMBER, CO_PASSWORD, CO_NAME, CO_PHONE, CO_EMAIL, CO_BIRTH, CO_GENDER, mem.CO_ENABLED, CO_JOINDATE, CO_LOGINTIME,
ADDRESS_1, ADDRESS_2, ADDRESS_3, CO_ACCOUNT, CO_AUTHORITY, AUTHORITIES_ID
 FROM HK_USER mem LEFT OUTER JOIN HK_AUTH auth on mem.USER_ID = auth.USER_ID
 WHERE mem.USER_ID = #{userId}
]]>
	</select>
	
	<insert id="userSave" >
	    INSERT INTO HK_USER
        (
            USER_ID,
            CO_PASSWORD,
            CO_NAME
        )
        VALUES
        (
            #{userId},
            #{userPassword},
            #{userName}
        )
	</insert>
	
	<insert id="userRoleSave">
		INSERT INTO HK_AUTH
        (
        	AUTHORITIES_ID,
            USER_ID,
            CO_AUTHORITY,
            CO_ENABLED
        )
        VALUES
        (
        	HK_AUTH_SEQ.nextval,
            #{authVO.userId},
            #{authVO.authAuthority},
            #{authVO.authEabled}
        )
	</insert>
	
	<select id="findUserNo" resultType="Integer">
		SELECT 
			USER_ID
		FROM HK_USER
		WHERE USER_ID = #{userId}
	</select>
	
	<select id="findRoleNo" resultType="Integer">
		SELECT 
			AUTHORITIES_ID
		FROM HK_AUTH
		WHERE AUTHORITIES_ID = #{authId}
	</select>
</mapper>